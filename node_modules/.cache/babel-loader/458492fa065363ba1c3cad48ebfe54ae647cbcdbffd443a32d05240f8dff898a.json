{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{jwtDecode}from'jwt-decode';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[loading,setLoading]=useState(true);const[profile,setProfile]=useState(null);const[roles,setRoles]=useState([]);const checkTokenValidity=async()=>{const token=localStorage.getItem('token');const tokenProvider=localStorage.getItem('tokenProvider');console.log('Checking token validity',{token,tokenProvider});if(token){if(tokenProvider==='naver'){await validateNaverToken(token);}else if(tokenProvider==='kakao'){await validateKakaoToken(token);}else{try{const decodedToken=jwtDecode(token);const currentTime=Date.now()/1000;console.log('Decoded token',decodedToken);if(decodedToken.exp<currentTime){console.log('Token expired');handleLogout();}else{console.log('Token is valid');setIsAuthenticated(true);setProfile(decodedToken);setRoles(decodedToken.role);// Expecting role to be an array\n}}catch(error){console.error('Failed to decode token:',error.message);handleLogout();}}}else{setIsAuthenticated(false);setRoles([]);}setLoading(false);};const validateNaverToken=async token=>{try{/*const response = await axios.get('https://openapi.naver.com/v1/nid/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n       setProfile({\r\n          name: response.data.response.name,\r\n          email: response.data.response.email,\r\n        }); */setIsAuthenticated(true);setRoles(['ROLE_USER']);}catch(error){console.error('네이버 토큰 검증 실패:',error.message);handleLogout();}};const validateKakaoToken=async token=>{try{/* const response = await axios.get('https://kapi.kakao.com/v2/user/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setProfile({\r\n        nickname: response.data.properties.nickname,\r\n      }); */setIsAuthenticated(true);setRoles(['ROLE_USER']);}catch(error){console.error('카카오 토큰 검증 실패:',error.message);handleLogout();}};const handleLogout=()=>{localStorage.removeItem('token');localStorage.removeItem('tokenProvider');setIsAuthenticated(false);setRoles([]);setProfile(null);};useEffect(()=>{checkTokenValidity();},[]);const handleOAuthCallback=async(accessToken,provider)=>{localStorage.setItem('token',accessToken);localStorage.setItem('tokenProvider',provider);if(provider==='naver'){await validateNaverToken(accessToken);}else if(provider==='kakao'){await validateKakaoToken(accessToken);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,setIsAuthenticated,profile,setProfile,roles,setRoles,handleOAuthCallback,handleLogout},children:!loading?children:/*#__PURE__*/_jsx(\"div\",{children:\"\\uB85C\\uB529 \\uC911\"})});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","loading","setLoading","profile","setProfile","roles","setRoles","checkTokenValidity","token","localStorage","getItem","tokenProvider","console","log","validateNaverToken","validateKakaoToken","decodedToken","currentTime","Date","now","exp","handleLogout","role","error","message","removeItem","handleOAuthCallback","accessToken","provider","setItem","Provider","value"],"sources":["D:/workspace/final_4market_frontend/src/services/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [profile, setProfile] = useState(null);\r\n  const [roles, setRoles] = useState([]);\r\n\r\n  const checkTokenValidity = async () => {\r\n    const token = localStorage.getItem('token');\r\n    const tokenProvider = localStorage.getItem('tokenProvider');\r\n\r\n    console.log('Checking token validity', { token, tokenProvider });\r\n\r\n    if (token) {\r\n      if (tokenProvider === 'naver') {\r\n        await validateNaverToken(token);\r\n      } else if (tokenProvider === 'kakao') {\r\n        await validateKakaoToken(token);\r\n      } else {\r\n        try {\r\n          const decodedToken = jwtDecode(token);\r\n          const currentTime = Date.now() / 1000;\r\n          console.log('Decoded token', decodedToken);\r\n          if (decodedToken.exp < currentTime) {\r\n            console.log('Token expired');\r\n            handleLogout();\r\n          } else {\r\n            console.log('Token is valid');\r\n            setIsAuthenticated(true);\r\n            setProfile(decodedToken);\r\n            setRoles(decodedToken.role); // Expecting role to be an array\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to decode token:', error.message);\r\n          handleLogout();\r\n        }\r\n      }\r\n    } else {\r\n      setIsAuthenticated(false);\r\n      setRoles([]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const validateNaverToken = async (token) => {\r\n    try {\r\n      /*const response = await axios.get('https://openapi.naver.com/v1/nid/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n       setProfile({\r\n          name: response.data.response.name,\r\n          email: response.data.response.email,\r\n        }); */\r\n      setIsAuthenticated(true);\r\n      setRoles(['ROLE_USER']);\r\n    } catch (error) {\r\n      console.error('네이버 토큰 검증 실패:', error.message);\r\n      handleLogout();\r\n    }\r\n  };\r\n\r\n  const validateKakaoToken = async (token) => {\r\n    try {\r\n      /* const response = await axios.get('https://kapi.kakao.com/v2/user/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setProfile({\r\n        nickname: response.data.properties.nickname,\r\n      }); */\r\n      setIsAuthenticated(true);\r\n      setRoles(['ROLE_USER']);\r\n    } catch (error) {\r\n      console.error('카카오 토큰 검증 실패:', error.message);\r\n      handleLogout();\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('tokenProvider');\r\n    setIsAuthenticated(false);\r\n    setRoles([]);\r\n    setProfile(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkTokenValidity();\r\n  }, []);\r\n\r\n  const handleOAuthCallback = async (accessToken, provider) => {\r\n    localStorage.setItem('token', accessToken);\r\n    localStorage.setItem('tokenProvider', provider);\r\n    if (provider === 'naver') {\r\n      await validateNaverToken(accessToken);\r\n    } else if (provider === 'kakao') {\r\n      await validateKakaoToken(accessToken);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated, profile, setProfile, roles, setRoles, handleOAuthCallback, handleLogout }}>\r\n      {!loading ? children : <div>로딩 중</div>}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACjE,OAASC,SAAS,KAAQ,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvC,MAAO,MAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACe,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAiB,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,KAAM,CAAAC,aAAa,CAAGF,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAE3DE,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAE,CAAEL,KAAK,CAAEG,aAAc,CAAC,CAAC,CAEhE,GAAIH,KAAK,CAAE,CACT,GAAIG,aAAa,GAAK,OAAO,CAAE,CAC7B,KAAM,CAAAG,kBAAkB,CAACN,KAAK,CAAC,CACjC,CAAC,IAAM,IAAIG,aAAa,GAAK,OAAO,CAAE,CACpC,KAAM,CAAAI,kBAAkB,CAACP,KAAK,CAAC,CACjC,CAAC,IAAM,CACL,GAAI,CACF,KAAM,CAAAQ,YAAY,CAAGxB,SAAS,CAACgB,KAAK,CAAC,CACrC,KAAM,CAAAS,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CACrCP,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEG,YAAY,CAAC,CAC1C,GAAIA,YAAY,CAACI,GAAG,CAAGH,WAAW,CAAE,CAClCL,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5BQ,YAAY,CAAC,CAAC,CAChB,CAAC,IAAM,CACLT,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC7Bb,kBAAkB,CAAC,IAAI,CAAC,CACxBI,UAAU,CAACY,YAAY,CAAC,CACxBV,QAAQ,CAACU,YAAY,CAACM,IAAI,CAAC,CAAE;AAC/B,CACF,CAAE,MAAOC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAACC,OAAO,CAAC,CACvDH,YAAY,CAAC,CAAC,CAChB,CACF,CACF,CAAC,IAAM,CACLrB,kBAAkB,CAAC,KAAK,CAAC,CACzBM,QAAQ,CAAC,EAAE,CAAC,CACd,CACAJ,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAED,KAAM,CAAAY,kBAAkB,CAAG,KAAO,CAAAN,KAAK,EAAK,CAC1C,GAAI,CACF;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cACMR,kBAAkB,CAAC,IAAI,CAAC,CACxBM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CACzB,CAAE,MAAOiB,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,eAAe,CAAEA,KAAK,CAACC,OAAO,CAAC,CAC7CH,YAAY,CAAC,CAAC,CAChB,CACF,CAAC,CAED,KAAM,CAAAN,kBAAkB,CAAG,KAAO,CAAAP,KAAK,EAAK,CAC1C,GAAI,CACF;AACN;AACA;AACA;AACA;AACA;AACA;AACA,YACMR,kBAAkB,CAAC,IAAI,CAAC,CACxBM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CACzB,CAAE,MAAOiB,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,eAAe,CAAEA,KAAK,CAACC,OAAO,CAAC,CAC7CH,YAAY,CAAC,CAAC,CAChB,CACF,CAAC,CAED,KAAM,CAAAA,YAAY,CAAGA,CAAA,GAAM,CACzBZ,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC,CAChChB,YAAY,CAACgB,UAAU,CAAC,eAAe,CAAC,CACxCzB,kBAAkB,CAAC,KAAK,CAAC,CACzBM,QAAQ,CAAC,EAAE,CAAC,CACZF,UAAU,CAAC,IAAI,CAAC,CAClB,CAAC,CAEDb,SAAS,CAAC,IAAM,CACdgB,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAmB,mBAAmB,CAAG,KAAAA,CAAOC,WAAW,CAAEC,QAAQ,GAAK,CAC3DnB,YAAY,CAACoB,OAAO,CAAC,OAAO,CAAEF,WAAW,CAAC,CAC1ClB,YAAY,CAACoB,OAAO,CAAC,eAAe,CAAED,QAAQ,CAAC,CAC/C,GAAIA,QAAQ,GAAK,OAAO,CAAE,CACxB,KAAM,CAAAd,kBAAkB,CAACa,WAAW,CAAC,CACvC,CAAC,IAAM,IAAIC,QAAQ,GAAK,OAAO,CAAE,CAC/B,KAAM,CAAAb,kBAAkB,CAACY,WAAW,CAAC,CACvC,CACF,CAAC,CAED,mBACEjC,IAAA,CAACC,WAAW,CAACmC,QAAQ,EAACC,KAAK,CAAE,CAAEhC,eAAe,CAAEC,kBAAkB,CAAEG,OAAO,CAAEC,UAAU,CAAEC,KAAK,CAAEC,QAAQ,CAAEoB,mBAAmB,CAAEL,YAAa,CAAE,CAAAvB,QAAA,CAC3I,CAACG,OAAO,CAAGH,QAAQ,cAAGJ,IAAA,QAAAI,QAAA,CAAK,qBAAI,CAAK,CAAC,CAClB,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}