{"ast":null,"code":"import React,{useContext}from'react';import{Navigate,Outlet}from'react-router-dom';import{AuthContext}from'../../services/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const RoleProtectedRoute=_ref=>{let{requiredRole}=_ref;const{isAuthenticated,roles}=useContext(AuthContext);if(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}if(roles&&roles.includes(requiredRole)){return/*#__PURE__*/_jsx(Outlet,{});}else{return/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true});}};export default RoleProtectedRoute;","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","jsx","_jsx","RoleProtectedRoute","_ref","requiredRole","isAuthenticated","roles","to","replace","includes"],"sources":["D:/workspace/final_4market_frontend/src/components/auth/RoleProtectedRoute.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { AuthContext } from '../../services/AuthContext';\r\n\r\nconst RoleProtectedRoute = ({ requiredRole }) => {\r\n  const { isAuthenticated, roles } = useContext(AuthContext);\r\n\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  if (roles && roles.includes(requiredRole)) {\r\n    return <Outlet />;\r\n  } else {\r\n    return <Navigate to=\"/\" replace />;\r\n  }\r\n};\r\n\r\nexport default RoleProtectedRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,QAAQ,CAAEC,MAAM,KAAQ,kBAAkB,CACnD,OAASC,WAAW,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzD,KAAM,CAAAC,kBAAkB,CAAGC,IAAA,EAAsB,IAArB,CAAEC,YAAa,CAAC,CAAAD,IAAA,CAC1C,KAAM,CAAEE,eAAe,CAAEC,KAAM,CAAC,CAAGV,UAAU,CAACG,WAAW,CAAC,CAE1D,GAAI,CAACM,eAAe,CAAE,CACpB,mBAAOJ,IAAA,CAACJ,QAAQ,EAACU,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CACzC,CAEA,GAAIF,KAAK,EAAIA,KAAK,CAACG,QAAQ,CAACL,YAAY,CAAC,CAAE,CACzC,mBAAOH,IAAA,CAACH,MAAM,GAAE,CAAC,CACnB,CAAC,IAAM,CACL,mBAAOG,IAAA,CAACJ,QAAQ,EAACU,EAAE,CAAC,GAAG,CAACC,OAAO,MAAE,CAAC,CACpC,CACF,CAAC,CAED,cAAe,CAAAN,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}